
const { pool, poolConnect ,sql} = require('../config/db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const asyncHandler = require('../utils/asyncHandler');
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'; // Store securely in .env



exports.register = asyncHandler(async (req, res, next) => {
  const { username, email, password } = req.body;

  try {
    await poolConnect;

    const hashedPassword = await bcrypt.hash(password, 10);

    await pool.request()
      .input('username', sql.VarChar, username)
      .input('email', sql.VarChar, email)
      .input('password', sql.VarChar, hashedPassword)
      .query(`INSERT INTO Users (username, email, password) VALUES (@username, @email, @password)`);

    return res.status(201).json({ message: 'User registered successfully' });

  } catch (err) {
    // Unique constraint violation (SQL Server)
    const sqlErrNo = err?.originalError?.number || err?.number;

    if (sqlErrNo === 2627 || sqlErrNo === 2601) {
      return res.status(409).json({ message: 'Email is already registered' });
    }

    // Unhandled errors
    console.error('Registration Error:', err);
    return res.status(500).json({ message: 'Internal server error' });
  }
});



// login 
exports.login = asyncHandler(async (req, res) => {
  await poolConnect;
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ message: 'Email and password are required' });
  }

  const result = await pool.request()
    .input('email', sql.VarChar, email)
    .query('SELECT * FROM users WHERE email = @email');

  const user = result.recordset[0];

  if (!user) {
    return res.status(401).json({ message: 'Invalid email or password' });
  }

  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    return res.status(401).json({ message: 'Invalid email or password' });
  }

  const token = jwt.sign(
    { id: user.id, email: user.email },
    JWT_SECRET,
    { expiresIn: '1h' }
  );

  return res.status(200).json({
    message: 'Login successful',
    token,
    user: {
      id: user.id,
      email: user.email
    }
  });
});